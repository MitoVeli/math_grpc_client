// Code generated by mockery v2.14.0. DO NOT EDIT.

package clientmocks

import (
	math "github.com/MitoVeli/math_grpc_client/pkg/grpc/math"
	mock "github.com/stretchr/testify/mock"
)

// MathGrpcClient is an autogenerated mock type for the MathGrpcClient type
type MathGrpcClient struct {
	mock.Mock
}

// Calculate provides a mock function with given fields: x, y, operationSign
func (_m *MathGrpcClient) Calculate(x float32, y float32, operationSign string) (*math.OperationResponse, error) {
	ret := _m.Called(x, y, operationSign)

	var r0 *math.OperationResponse
	if rf, ok := ret.Get(0).(func(float32, float32, string) *math.OperationResponse); ok {
		r0 = rf(x, y, operationSign)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*math.OperationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(float32, float32, string) error); ok {
		r1 = rf(x, y, operationSign)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMathGrpcClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMathGrpcClient creates a new instance of MathGrpcClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMathGrpcClient(t mockConstructorTestingTNewMathGrpcClient) *MathGrpcClient {
	mock := &MathGrpcClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
