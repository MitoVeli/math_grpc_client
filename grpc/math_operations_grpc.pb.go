// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: grpc/math_operations.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MathOperationsClient is the client API for MathOperations service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MathOperationsClient interface {
	DoMath(ctx context.Context, in *OperationRequest, opts ...grpc.CallOption) (*OperationResponse, error)
}

type mathOperationsClient struct {
	cc grpc.ClientConnInterface
}

func NewMathOperationsClient(cc grpc.ClientConnInterface) MathOperationsClient {
	return &mathOperationsClient{cc}
}

func (c *mathOperationsClient) DoMath(ctx context.Context, in *OperationRequest, opts ...grpc.CallOption) (*OperationResponse, error) {
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, "/grpc.MathOperations/DoMath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MathOperationsServer is the server API for MathOperations service.
// All implementations must embed UnimplementedMathOperationsServer
// for forward compatibility
type MathOperationsServer interface {
	DoMath(context.Context, *OperationRequest) (*OperationResponse, error)
	mustEmbedUnimplementedMathOperationsServer()
}

// UnimplementedMathOperationsServer must be embedded to have forward compatible implementations.
type UnimplementedMathOperationsServer struct {
}

func (UnimplementedMathOperationsServer) DoMath(context.Context, *OperationRequest) (*OperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoMath not implemented")
}
func (UnimplementedMathOperationsServer) mustEmbedUnimplementedMathOperationsServer() {}

// UnsafeMathOperationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MathOperationsServer will
// result in compilation errors.
type UnsafeMathOperationsServer interface {
	mustEmbedUnimplementedMathOperationsServer()
}

func RegisterMathOperationsServer(s grpc.ServiceRegistrar, srv MathOperationsServer) {
	s.RegisterService(&MathOperations_ServiceDesc, srv)
}

func _MathOperations_DoMath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathOperationsServer).DoMath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.MathOperations/DoMath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathOperationsServer).DoMath(ctx, req.(*OperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MathOperations_ServiceDesc is the grpc.ServiceDesc for MathOperations service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MathOperations_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.MathOperations",
	HandlerType: (*MathOperationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoMath",
			Handler:    _MathOperations_DoMath_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/math_operations.proto",
}
